plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'org.hidetake.ssh' version '2.10.1'
}

group = 'uk.ac.ebi.ait'
version = '0.1.3-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url "https://gitlab.ebi.ac.uk/api/v4/groups/enasequence/-/packages/maven" }
	maven { url "https://gitlab.ebi.ac.uk/api/v4/projects/811/packages/maven"}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation( group: 'uk.ac.ebi.ena', name: 'readtools', version: '1.1.11' )
	implementation( group: 'uk.ac.ebi.ena.sequence', name: 'sequencetools', version: '2.0.50' )
	implementation( group: 'uk.ac.ebi.ena.webin-cli', name: 'webin-cli-validator', version: '1.0.8' )

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation("de.siegmar:logback-gelf:1.1.0")

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
}

test {
	useJUnitPlatform()

	maxHeapSize = "3G"
}

bootJar {
	launchScript()
}

ext.gradle_env = hasProperty('env') ? env : 'dev'

remotes {
	devFCVOnCluster {
		role('dev')
		host = project.hasProperty(project.name + "DevOnClusterDeployTarget") ? getProperty(project.name + "DevOnClusterDeployTarget") : 'localhost'
	}
	devFCVOnFUSHH {
		role('dev')
		host = project.hasProperty(project.name + "DevOnFUSHHDeployTarget") ? getProperty(project.name + "DevOnFUSHHDeployTarget") : 'localhost'
	}
	testFCVOnCluster {
		role('test')
		host = project.hasProperty(project.name + "TestOnClusterDeployTarget") ? getProperty(project.name + "TestOnClusterDeployTarget") : 'localhost'
	}
	testFCVOnFUSHH1 {
		role('test')
		host = project.hasProperty(project.name + "TestOnFUSHH1DeployTarget") ? getProperty(project.name + "TestOnFUSHH1DeployTarget") : 'localhost'
	}
	testFCVOnFUSHH2 {
		role('test')
		host = project.hasProperty(project.name + "TestOnFUSHH2DeployTarget") ? getProperty(project.name + "TestOnFUSHH2DeployTarget") : 'localhost'
	}
	prodFCVOnCluster {
		role('prod')
		host = project.hasProperty(project.name + "ProdOnClusterDeployTarget") ? getProperty(project.name + "ProdOnClusterDeployTarget") : 'localhost'
	}
	prodFCVOnFUSHH1 {
		role('prod')
		host = project.hasProperty(project.name + "ProdOnFUSHH1DeployTarget") ? getProperty(project.name + "ProdOnFUSHH1DeployTarget") : 'localhost'
	}
	prodFCVOnFUSHH2 {
		role('prod')
		host = project.hasProperty(project.name + "ProdOnFUSHH2DeployTarget") ? getProperty(project.name + "ProdOnFUSHH2DeployTarget") : 'localhost'
	}
	prodFCVOnFUSHH3 {
		role('prod')
		host = project.hasProperty(project.name + "ProdOnFUSHH3DeployTarget") ? getProperty(project.name + "ProdOnFUSHH3DeployTarget") : 'localhost'
	}
}

ssh.settings {
	user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
	ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
	ssh.settings.passphrase = sshPassphrase
}

task deployJar(dependsOn: 'build') {
	doLast {
		sshRun()
	}
	ssh.settings {
		knownHosts = allowAnyHosts
	}
}

task testSsh() {
	doLast {
		sshTestRun()
	}
	ssh.settings {
		knownHosts = allowAnyHosts
	}
}

private Object sshRun() {
	ssh.run {
		session(remotes.role(gradle_env)) {
			execute "/homes/sub_adm/create_dirs.sh $gradle_env $project.name", ignoreError: false
			def jarFileName = project.name + "-"  + project.version + "." + System.currentTimeMillis() + ".jar"
			File jarDeployFile = new File("/homes/sub_adm/apps/$env/$project.name/jar",jarFileName)
			File jarDeployDir = jarDeployFile.getParentFile()
			println "Uploading jar $jar.archivePath.name to $jarDeployFile.absolutePath area on $remote"
			put from: jar.archivePath.absolutePath, into: jarDeployFile.absolutePath
			println "creating symbolic link to $jar.archiveName"
			def result = execute "ln -s -f $jarDeployFile.absolutePath $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
			println result
			println "updating permissions of $jarDeployDir/$jar.archiveName"
			execute "chmod u+x $jarDeployDir/*", ignoreError: false
		}
	}
}

private Object sshTestRun(){
	ssh.run {
		session(remotes.role(gradle_env)){
			println "started ssh session"
		}
	}
}
